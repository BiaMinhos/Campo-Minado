
CampoMinado-ProjetoIntegrado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000251c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002970  08002628  08002628  00012628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f98  08004f98  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08004f98  08004f98  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f98  08004f98  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f98  08004f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f9c  08004f9c  00014f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000088  08005028  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08005028  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006bf4  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015cb  00000000  00000000  00026ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  00028270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000164b1  00000000  00000000  00028970  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006147  00000000  00000000  0003ee21  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000804b6  00000000  00000000  00044f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c541e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000630  00000000  00000000  000c54a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001c1c  00000000  00000000  000c5ad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002610 	.word	0x08002610

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002610 	.word	0x08002610

0800014c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000156:	2200      	movs	r2, #0
 8000158:	2110      	movs	r1, #16
 800015a:	480c      	ldr	r0, [pc, #48]	; (800018c <ST7789_WriteCommand+0x40>)
 800015c:	f001 fb15 	bl	800178a <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000160:	2200      	movs	r2, #0
 8000162:	2101      	movs	r1, #1
 8000164:	480a      	ldr	r0, [pc, #40]	; (8000190 <ST7789_WriteCommand+0x44>)
 8000166:	f001 fb10 	bl	800178a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800016a:	1df9      	adds	r1, r7, #7
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	2201      	movs	r2, #1
 8000172:	4808      	ldr	r0, [pc, #32]	; (8000194 <ST7789_WriteCommand+0x48>)
 8000174:	f001 ff90 	bl	8002098 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4803      	ldr	r0, [pc, #12]	; (800018c <ST7789_WriteCommand+0x40>)
 800017e:	f001 fb04 	bl	800178a <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800
 8000190:	40010c00 	.word	0x40010c00
 8000194:	20000134 	.word	0x20000134

08000198 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80001a2:	2200      	movs	r2, #0
 80001a4:	2110      	movs	r1, #16
 80001a6:	4815      	ldr	r0, [pc, #84]	; (80001fc <ST7789_WriteData+0x64>)
 80001a8:	f001 faef 	bl	800178a <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80001ac:	2201      	movs	r2, #1
 80001ae:	2101      	movs	r1, #1
 80001b0:	4813      	ldr	r0, [pc, #76]	; (8000200 <ST7789_WriteData+0x68>)
 80001b2:	f001 faea 	bl	800178a <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80001b6:	e015      	b.n	80001e4 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001be:	4293      	cmp	r3, r2
 80001c0:	bf28      	it	cs
 80001c2:	4613      	movcs	r3, r2
 80001c4:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80001c6:	89fa      	ldrh	r2, [r7, #14]
 80001c8:	f04f 33ff 	mov.w	r3, #4294967295
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	480d      	ldr	r0, [pc, #52]	; (8000204 <ST7789_WriteData+0x6c>)
 80001d0:	f001 ff62 	bl	8002098 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80001d4:	89fb      	ldrh	r3, [r7, #14]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80001dc:	89fb      	ldrh	r3, [r7, #14]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	1ad3      	subs	r3, r2, r3
 80001e2:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d1e6      	bne.n	80001b8 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 80001ea:	2201      	movs	r2, #1
 80001ec:	2110      	movs	r1, #16
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <ST7789_WriteData+0x64>)
 80001f0:	f001 facb 	bl	800178a <HAL_GPIO_WritePin>
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00
 8000204:	20000134 	.word	0x20000134

08000208 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480c      	ldr	r0, [pc, #48]	; (8000248 <ST7789_WriteSmallData+0x40>)
 8000218:	f001 fab7 	bl	800178a <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800021c:	2201      	movs	r2, #1
 800021e:	2101      	movs	r1, #1
 8000220:	480a      	ldr	r0, [pc, #40]	; (800024c <ST7789_WriteSmallData+0x44>)
 8000222:	f001 fab2 	bl	800178a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000226:	1df9      	adds	r1, r7, #7
 8000228:	f04f 33ff 	mov.w	r3, #4294967295
 800022c:	2201      	movs	r2, #1
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <ST7789_WriteSmallData+0x48>)
 8000230:	f001 ff32 	bl	8002098 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000234:	2201      	movs	r2, #1
 8000236:	2110      	movs	r1, #16
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <ST7789_WriteSmallData+0x40>)
 800023a:	f001 faa6 	bl	800178a <HAL_GPIO_WritePin>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010800 	.word	0x40010800
 800024c:	40010c00 	.word	0x40010c00
 8000250:	20000134 	.word	0x20000134

08000254 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800025e:	2036      	movs	r0, #54	; 0x36
 8000260:	f7ff ff74 	bl	800014c <ST7789_WriteCommand>
	switch (m) {
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b03      	cmp	r3, #3
 8000268:	d81a      	bhi.n	80002a0 <ST7789_SetRotation+0x4c>
 800026a:	a201      	add	r2, pc, #4	; (adr r2, 8000270 <ST7789_SetRotation+0x1c>)
 800026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000270:	08000281 	.word	0x08000281
 8000274:	08000289 	.word	0x08000289
 8000278:	08000291 	.word	0x08000291
 800027c:	08000299 	.word	0x08000299
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000280:	20c0      	movs	r0, #192	; 0xc0
 8000282:	f7ff ffc1 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000286:	e00c      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000288:	20a0      	movs	r0, #160	; 0xa0
 800028a:	f7ff ffbd 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800028e:	e008      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ffb9 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000296:	e004      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000298:	2060      	movs	r0, #96	; 0x60
 800029a:	f7ff ffb5 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800029e:	e000      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80002a0:	bf00      	nop
	}
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop

080002ac <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b087      	sub	sp, #28
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4604      	mov	r4, r0
 80002b4:	4608      	mov	r0, r1
 80002b6:	4611      	mov	r1, r2
 80002b8:	461a      	mov	r2, r3
 80002ba:	4623      	mov	r3, r4
 80002bc:	80fb      	strh	r3, [r7, #6]
 80002be:	4603      	mov	r3, r0
 80002c0:	80bb      	strh	r3, [r7, #4]
 80002c2:	460b      	mov	r3, r1
 80002c4:	807b      	strh	r3, [r7, #2]
 80002c6:	4613      	mov	r3, r2
 80002c8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80002ca:	2200      	movs	r2, #0
 80002cc:	2110      	movs	r1, #16
 80002ce:	4824      	ldr	r0, [pc, #144]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 80002d0:	f001 fa5b 	bl	800178a <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	82fb      	strh	r3, [r7, #22]
 80002d8:	887b      	ldrh	r3, [r7, #2]
 80002da:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80002dc:	88bb      	ldrh	r3, [r7, #4]
 80002de:	827b      	strh	r3, [r7, #18]
 80002e0:	883b      	ldrh	r3, [r7, #0]
 80002e2:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80002e4:	202a      	movs	r0, #42	; 0x2a
 80002e6:	f7ff ff31 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80002ea:	8afb      	ldrh	r3, [r7, #22]
 80002ec:	0a1b      	lsrs	r3, r3, #8
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	733b      	strb	r3, [r7, #12]
 80002f4:	8afb      	ldrh	r3, [r7, #22]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	737b      	strb	r3, [r7, #13]
 80002fa:	8abb      	ldrh	r3, [r7, #20]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	b29b      	uxth	r3, r3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	73bb      	strb	r3, [r7, #14]
 8000304:	8abb      	ldrh	r3, [r7, #20]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	2104      	movs	r1, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff41 	bl	8000198 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000316:	202b      	movs	r0, #43	; 0x2b
 8000318:	f7ff ff18 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800031c:	8a7b      	ldrh	r3, [r7, #18]
 800031e:	0a1b      	lsrs	r3, r3, #8
 8000320:	b29b      	uxth	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	723b      	strb	r3, [r7, #8]
 8000326:	8a7b      	ldrh	r3, [r7, #18]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	727b      	strb	r3, [r7, #9]
 800032c:	8a3b      	ldrh	r3, [r7, #16]
 800032e:	0a1b      	lsrs	r3, r3, #8
 8000330:	b29b      	uxth	r3, r3
 8000332:	b2db      	uxtb	r3, r3
 8000334:	72bb      	strb	r3, [r7, #10]
 8000336:	8a3b      	ldrh	r3, [r7, #16]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	2104      	movs	r1, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff28 	bl	8000198 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000348:	202c      	movs	r0, #44	; 0x2c
 800034a:	f7ff feff 	bl	800014c <ST7789_WriteCommand>
	ST7789_UnSelect();
 800034e:	2201      	movs	r2, #1
 8000350:	2110      	movs	r1, #16
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 8000354:	f001 fa19 	bl	800178a <HAL_GPIO_WritePin>
}
 8000358:	bf00      	nop
 800035a:	371c      	adds	r7, #28
 800035c:	46bd      	mov	sp, r7
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	40010800 	.word	0x40010800

08000364 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b08b      	sub	sp, #44	; 0x2c
 8000368:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 800036a:	2019      	movs	r0, #25
 800036c:	f000 ff96 	bl	800129c <HAL_Delay>
    ST7789_RST_Clr();
 8000370:	2200      	movs	r2, #0
 8000372:	2102      	movs	r1, #2
 8000374:	4846      	ldr	r0, [pc, #280]	; (8000490 <ST7789_Init+0x12c>)
 8000376:	f001 fa08 	bl	800178a <HAL_GPIO_WritePin>
    HAL_Delay(25);
 800037a:	2019      	movs	r0, #25
 800037c:	f000 ff8e 	bl	800129c <HAL_Delay>
    ST7789_RST_Set();
 8000380:	2201      	movs	r2, #1
 8000382:	2102      	movs	r1, #2
 8000384:	4842      	ldr	r0, [pc, #264]	; (8000490 <ST7789_Init+0x12c>)
 8000386:	f001 fa00 	bl	800178a <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800038a:	2032      	movs	r0, #50	; 0x32
 800038c:	f000 ff86 	bl	800129c <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000390:	203a      	movs	r0, #58	; 0x3a
 8000392:	f7ff fedb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000396:	2055      	movs	r0, #85	; 0x55
 8000398:	f7ff ff36 	bl	8000208 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800039c:	20b2      	movs	r0, #178	; 0xb2
 800039e:	f7ff fed5 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80003a2:	4a3c      	ldr	r2, [pc, #240]	; (8000494 <ST7789_Init+0x130>)
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ac:	6018      	str	r0, [r3, #0]
 80003ae:	3304      	adds	r3, #4
 80003b0:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80003b2:	f107 0320 	add.w	r3, r7, #32
 80003b6:	2105      	movs	r1, #5
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff feed 	bl	8000198 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80003be:	2002      	movs	r0, #2
 80003c0:	f7ff ff48 	bl	8000254 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80003c4:	20b7      	movs	r0, #183	; 0xb7
 80003c6:	f7ff fec1 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80003ca:	2035      	movs	r0, #53	; 0x35
 80003cc:	f7ff ff1c 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80003d0:	20bb      	movs	r0, #187	; 0xbb
 80003d2:	f7ff febb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80003d6:	2019      	movs	r0, #25
 80003d8:	f7ff ff16 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80003dc:	20c0      	movs	r0, #192	; 0xc0
 80003de:	f7ff feb5 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80003e2:	202c      	movs	r0, #44	; 0x2c
 80003e4:	f7ff ff10 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80003e8:	20c2      	movs	r0, #194	; 0xc2
 80003ea:	f7ff feaf 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff ff0a 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80003f4:	20c3      	movs	r0, #195	; 0xc3
 80003f6:	f7ff fea9 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80003fa:	2012      	movs	r0, #18
 80003fc:	f7ff ff04 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000400:	20c4      	movs	r0, #196	; 0xc4
 8000402:	f7ff fea3 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000406:	2020      	movs	r0, #32
 8000408:	f7ff fefe 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800040c:	20c6      	movs	r0, #198	; 0xc6
 800040e:	f7ff fe9d 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000412:	200f      	movs	r0, #15
 8000414:	f7ff fef8 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000418:	20d0      	movs	r0, #208	; 0xd0
 800041a:	f7ff fe97 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800041e:	20a4      	movs	r0, #164	; 0xa4
 8000420:	f7ff fef2 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000424:	20a1      	movs	r0, #161	; 0xa1
 8000426:	f7ff feef 	bl	8000208 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800042a:	20e0      	movs	r0, #224	; 0xe0
 800042c:	f7ff fe8e 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000430:	4b19      	ldr	r3, [pc, #100]	; (8000498 <ST7789_Init+0x134>)
 8000432:	f107 0410 	add.w	r4, r7, #16
 8000436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000438:	c407      	stmia	r4!, {r0, r1, r2}
 800043a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	210e      	movs	r1, #14
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fea8 	bl	8000198 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000448:	20e1      	movs	r0, #225	; 0xe1
 800044a:	f7ff fe7f 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <ST7789_Init+0x138>)
 8000450:	463c      	mov	r4, r7
 8000452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000454:	c407      	stmia	r4!, {r0, r1, r2}
 8000456:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000458:	463b      	mov	r3, r7
 800045a:	210e      	movs	r1, #14
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fe9b 	bl	8000198 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000462:	2021      	movs	r0, #33	; 0x21
 8000464:	f7ff fe72 	bl	800014c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000468:	2011      	movs	r0, #17
 800046a:	f7ff fe6f 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800046e:	2013      	movs	r0, #19
 8000470:	f7ff fe6c 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000474:	2029      	movs	r0, #41	; 0x29
 8000476:	f7ff fe69 	bl	800014c <ST7789_WriteCommand>

	HAL_Delay(50);
 800047a:	2032      	movs	r0, #50	; 0x32
 800047c:	f000 ff0e 	bl	800129c <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000480:	2000      	movs	r0, #0
 8000482:	f000 f80d 	bl	80004a0 <ST7789_Fill_Color>
}
 8000486:	bf00      	nop
 8000488:	372c      	adds	r7, #44	; 0x2c
 800048a:	46bd      	mov	sp, r7
 800048c:	bd90      	pop	{r4, r7, pc}
 800048e:	bf00      	nop
 8000490:	40010c00 	.word	0x40010c00
 8000494:	08002628 	.word	0x08002628
 8000498:	08002630 	.word	0x08002630
 800049c:	08002640 	.word	0x08002640

080004a0 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80004aa:	23ef      	movs	r3, #239	; 0xef
 80004ac:	22ef      	movs	r2, #239	; 0xef
 80004ae:	2100      	movs	r1, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fefb 	bl	80002ac <ST7789_SetAddressWindow>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	81fb      	strh	r3, [r7, #14]
 80004ba:	e019      	b.n	80004f0 <ST7789_Fill_Color+0x50>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004bc:	2300      	movs	r3, #0
 80004be:	81bb      	strh	r3, [r7, #12]
 80004c0:	e010      	b.n	80004e4 <ST7789_Fill_Color+0x44>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	0a1b      	lsrs	r3, r3, #8
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	723b      	strb	r3, [r7, #8]
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	2102      	movs	r1, #2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fe5d 	bl	8000198 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004de:	89bb      	ldrh	r3, [r7, #12]
 80004e0:	3301      	adds	r3, #1
 80004e2:	81bb      	strh	r3, [r7, #12]
 80004e4:	89bb      	ldrh	r3, [r7, #12]
 80004e6:	2bef      	cmp	r3, #239	; 0xef
 80004e8:	d9eb      	bls.n	80004c2 <ST7789_Fill_Color+0x22>
		for (i = 0; i < ST7789_WIDTH; i++)
 80004ea:	89fb      	ldrh	r3, [r7, #14]
 80004ec:	3301      	adds	r3, #1
 80004ee:	81fb      	strh	r3, [r7, #14]
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	2bef      	cmp	r3, #239	; 0xef
 80004f4:	d9e2      	bls.n	80004bc <ST7789_Fill_Color+0x1c>
				}
	#endif
	//ALGG ST7789_UnSelect();
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
 800050a:	460b      	mov	r3, r1
 800050c:	80bb      	strh	r3, [r7, #4]
 800050e:	4613      	mov	r3, r2
 8000510:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	2bef      	cmp	r3, #239	; 0xef
 8000516:	d821      	bhi.n	800055c <ST7789_DrawPixel+0x5c>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000518:	88bb      	ldrh	r3, [r7, #4]
 800051a:	2bef      	cmp	r3, #239	; 0xef
 800051c:	d81e      	bhi.n	800055c <ST7789_DrawPixel+0x5c>
	
	ST7789_SetAddressWindow(x, y, x, y);
 800051e:	88bb      	ldrh	r3, [r7, #4]
 8000520:	88fa      	ldrh	r2, [r7, #6]
 8000522:	88b9      	ldrh	r1, [r7, #4]
 8000524:	88f8      	ldrh	r0, [r7, #6]
 8000526:	f7ff fec1 	bl	80002ac <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	b29b      	uxth	r3, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	733b      	strb	r3, [r7, #12]
 8000534:	887b      	ldrh	r3, [r7, #2]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 800053a:	2200      	movs	r2, #0
 800053c:	2110      	movs	r1, #16
 800053e:	4809      	ldr	r0, [pc, #36]	; (8000564 <ST7789_DrawPixel+0x64>)
 8000540:	f001 f923 	bl	800178a <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2102      	movs	r1, #2
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe24 	bl	8000198 <ST7789_WriteData>
	ST7789_UnSelect();
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <ST7789_DrawPixel+0x64>)
 8000556:	f001 f918 	bl	800178a <HAL_GPIO_WritePin>
 800055a:	e000      	b.n	800055e <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 800055c:	bf00      	nop
}
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40010800 	.word	0x40010800

08000568 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
 800056e:	4604      	mov	r4, r0
 8000570:	4608      	mov	r0, r1
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	4623      	mov	r3, r4
 8000578:	80fb      	strh	r3, [r7, #6]
 800057a:	4603      	mov	r3, r0
 800057c:	80bb      	strh	r3, [r7, #4]
 800057e:	460b      	mov	r3, r1
 8000580:	807b      	strh	r3, [r7, #2]
 8000582:	4613      	mov	r3, r2
 8000584:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000586:	883a      	ldrh	r2, [r7, #0]
 8000588:	88bb      	ldrh	r3, [r7, #4]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000590:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000594:	8879      	ldrh	r1, [r7, #2]
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	1acb      	subs	r3, r1, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	bfb8      	it	lt
 800059e:	425b      	neglt	r3, r3
 80005a0:	429a      	cmp	r2, r3
 80005a2:	bfcc      	ite	gt
 80005a4:	2301      	movgt	r3, #1
 80005a6:	2300      	movle	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	827b      	strh	r3, [r7, #18]
    if (steep) {
 80005ac:	8a7b      	ldrh	r3, [r7, #18]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00b      	beq.n	80005ca <ST7789_DrawLine+0x62>
		swap = x0;
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 80005ba:	8a3b      	ldrh	r3, [r7, #16]
 80005bc:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 80005be:	887b      	ldrh	r3, [r7, #2]
 80005c0:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 80005c2:	883b      	ldrh	r3, [r7, #0]
 80005c4:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 80005c6:	8a3b      	ldrh	r3, [r7, #16]
 80005c8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80005ca:	88fa      	ldrh	r2, [r7, #6]
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d90b      	bls.n	80005ea <ST7789_DrawLine+0x82>
		swap = x0;
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 80005da:	8a3b      	ldrh	r3, [r7, #16]
 80005dc:	807b      	strh	r3, [r7, #2]

		swap = y0;
 80005de:	88bb      	ldrh	r3, [r7, #4]
 80005e0:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 80005e6:	8a3b      	ldrh	r3, [r7, #16]
 80005e8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80005ea:	887a      	ldrh	r2, [r7, #2]
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 80005f4:	883a      	ldrh	r2, [r7, #0]
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bfb8      	it	lt
 80005fe:	425b      	neglt	r3, r3
 8000600:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8000602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000606:	0fda      	lsrs	r2, r3, #31
 8000608:	4413      	add	r3, r2
 800060a:	105b      	asrs	r3, r3, #1
 800060c:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 800060e:	88ba      	ldrh	r2, [r7, #4]
 8000610:	883b      	ldrh	r3, [r7, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d202      	bcs.n	800061c <ST7789_DrawLine+0xb4>
        ystep = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	82bb      	strh	r3, [r7, #20]
 800061a:	e028      	b.n	800066e <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 800061c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000620:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8000622:	e024      	b.n	800066e <ST7789_DrawLine+0x106>
        if (steep) {
 8000624:	8a7b      	ldrh	r3, [r7, #18]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 800062a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800062c:	88f9      	ldrh	r1, [r7, #6]
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff65 	bl	8000500 <ST7789_DrawPixel>
 8000636:	e005      	b.n	8000644 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8000638:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800063a:	88b9      	ldrh	r1, [r7, #4]
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff5e 	bl	8000500 <ST7789_DrawPixel>
        }
        err -= dy;
 8000644:	8afa      	ldrh	r2, [r7, #22]
 8000646:	89bb      	ldrh	r3, [r7, #12]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b29b      	uxth	r3, r3
 800064c:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 800064e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000652:	2b00      	cmp	r3, #0
 8000654:	da08      	bge.n	8000668 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8000656:	8aba      	ldrh	r2, [r7, #20]
 8000658:	88bb      	ldrh	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800065e:	8afa      	ldrh	r2, [r7, #22]
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	4413      	add	r3, r2
 8000664:	b29b      	uxth	r3, r3
 8000666:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	3301      	adds	r3, #1
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	88fa      	ldrh	r2, [r7, #6]
 8000670:	887b      	ldrh	r3, [r7, #2]
 8000672:	429a      	cmp	r2, r3
 8000674:	d9d6      	bls.n	8000624 <ST7789_DrawLine+0xbc>
        }
    }
}
 8000676:	bf00      	nop
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd90      	pop	{r4, r7, pc}
	...

08000680 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000680:	b082      	sub	sp, #8
 8000682:	b590      	push	{r4, r7, lr}
 8000684:	b089      	sub	sp, #36	; 0x24
 8000686:	af00      	add	r7, sp, #0
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
 800068a:	4603      	mov	r3, r0
 800068c:	80fb      	strh	r3, [r7, #6]
 800068e:	460b      	mov	r3, r1
 8000690:	80bb      	strh	r3, [r7, #4]
 8000692:	4613      	mov	r3, r2
 8000694:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000696:	2200      	movs	r2, #0
 8000698:	2110      	movs	r1, #16
 800069a:	4838      	ldr	r0, [pc, #224]	; (800077c <ST7789_WriteChar+0xfc>)
 800069c:	f001 f875 	bl	800178a <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80006a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	4413      	add	r3, r2
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	3b01      	subs	r3, #1
 80006ae:	b29c      	uxth	r4, r3
 80006b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	3b01      	subs	r3, #1
 80006be:	b29b      	uxth	r3, r3
 80006c0:	88b9      	ldrh	r1, [r7, #4]
 80006c2:	88f8      	ldrh	r0, [r7, #6]
 80006c4:	4622      	mov	r2, r4
 80006c6:	f7ff fdf1 	bl	80002ac <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
 80006ce:	e043      	b.n	8000758 <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 80006d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	3b20      	subs	r3, #32
 80006d6:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80006da:	fb01 f303 	mul.w	r3, r1, r3
 80006de:	4619      	mov	r1, r3
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	440b      	add	r3, r1
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	e029      	b.n	8000746 <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 80006f2:	697a      	ldr	r2, [r7, #20]
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00e      	beq.n	8000720 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000702:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	b29b      	uxth	r3, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	743b      	strb	r3, [r7, #16]
 800070c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800070e:	b2db      	uxtb	r3, r3
 8000710:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	2102      	movs	r1, #2
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fd3d 	bl	8000198 <ST7789_WriteData>
 800071e:	e00f      	b.n	8000740 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000720:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	b29b      	uxth	r3, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	733b      	strb	r3, [r7, #12]
 800072c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000730:	b2db      	uxtb	r3, r3
 8000732:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2102      	movs	r1, #2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fd2c 	bl	8000198 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	3301      	adds	r3, #1
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800074a:	461a      	mov	r2, r3
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	4293      	cmp	r3, r2
 8000750:	d3cf      	bcc.n	80006f2 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3301      	adds	r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800075c:	461a      	mov	r2, r3
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	4293      	cmp	r3, r2
 8000762:	d3b5      	bcc.n	80006d0 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8000764:	2201      	movs	r2, #1
 8000766:	2110      	movs	r1, #16
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <ST7789_WriteChar+0xfc>)
 800076a:	f001 f80e 	bl	800178a <HAL_GPIO_WritePin>
}
 800076e:	bf00      	nop
 8000770:	3724      	adds	r7, #36	; 0x24
 8000772:	46bd      	mov	sp, r7
 8000774:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000778:	b002      	add	sp, #8
 800077a:	4770      	bx	lr
 800077c:	40010800 	.word	0x40010800

08000780 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000780:	b082      	sub	sp, #8
 8000782:	b580      	push	{r7, lr}
 8000784:	b086      	sub	sp, #24
 8000786:	af04      	add	r7, sp, #16
 8000788:	603a      	str	r2, [r7, #0]
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	4603      	mov	r3, r0
 800078e:	80fb      	strh	r3, [r7, #6]
 8000790:	460b      	mov	r3, r1
 8000792:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000794:	2200      	movs	r2, #0
 8000796:	2110      	movs	r1, #16
 8000798:	4821      	ldr	r0, [pc, #132]	; (8000820 <ST7789_WriteString+0xa0>)
 800079a:	f000 fff6 	bl	800178a <HAL_GPIO_WritePin>
	while (*str) {
 800079e:	e02d      	b.n	80007fc <ST7789_WriteString+0x7c>
		if (x + font.width >= ST7789_WIDTH) {
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	7d3a      	ldrb	r2, [r7, #20]
 80007a4:	4413      	add	r3, r2
 80007a6:	2bef      	cmp	r3, #239	; 0xef
 80007a8:	dd13      	ble.n	80007d2 <ST7789_WriteString+0x52>
			x = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80007ae:	7d7b      	ldrb	r3, [r7, #21]
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	88bb      	ldrh	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 80007b8:	88bb      	ldrh	r3, [r7, #4]
 80007ba:	7d7a      	ldrb	r2, [r7, #21]
 80007bc:	4413      	add	r3, r2
 80007be:	2bef      	cmp	r3, #239	; 0xef
 80007c0:	dc21      	bgt.n	8000806 <ST7789_WriteString+0x86>
				break;
			}

			if (*str == ' ') {
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b20      	cmp	r3, #32
 80007c8:	d103      	bne.n	80007d2 <ST7789_WriteString+0x52>
				// skip spaces in the beginning of the new line
				str++;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	603b      	str	r3, [r7, #0]
				continue;
 80007d0:	e014      	b.n	80007fc <ST7789_WriteString+0x7c>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	781a      	ldrb	r2, [r3, #0]
 80007d6:	88b9      	ldrh	r1, [r7, #4]
 80007d8:	88f8      	ldrh	r0, [r7, #6]
 80007da:	8c3b      	ldrh	r3, [r7, #32]
 80007dc:	9302      	str	r3, [sp, #8]
 80007de:	8bbb      	ldrh	r3, [r7, #28]
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	f7ff ff4a 	bl	8000680 <ST7789_WriteChar>
		x += font.width;
 80007ec:	7d3b      	ldrb	r3, [r7, #20]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	88fb      	ldrh	r3, [r7, #6]
 80007f2:	4413      	add	r3, r2
 80007f4:	80fb      	strh	r3, [r7, #6]
		str++;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	603b      	str	r3, [r7, #0]
	while (*str) {
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1cd      	bne.n	80007a0 <ST7789_WriteString+0x20>
 8000804:	e000      	b.n	8000808 <ST7789_WriteString+0x88>
				break;
 8000806:	bf00      	nop
	}
	ST7789_UnSelect();
 8000808:	2201      	movs	r2, #1
 800080a:	2110      	movs	r1, #16
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <ST7789_WriteString+0xa0>)
 800080e:	f000 ffbc 	bl	800178a <HAL_GPIO_WritePin>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800081c:	b002      	add	sp, #8
 800081e:	4770      	bx	lr
 8000820:	40010800 	.word	0x40010800

08000824 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b087      	sub	sp, #28
 8000828:	af02      	add	r7, sp, #8
 800082a:	4604      	mov	r4, r0
 800082c:	4608      	mov	r0, r1
 800082e:	4611      	mov	r1, r2
 8000830:	461a      	mov	r2, r3
 8000832:	4623      	mov	r3, r4
 8000834:	80fb      	strh	r3, [r7, #6]
 8000836:	4603      	mov	r3, r0
 8000838:	80bb      	strh	r3, [r7, #4]
 800083a:	460b      	mov	r3, r1
 800083c:	807b      	strh	r3, [r7, #2]
 800083e:	4613      	mov	r3, r2
 8000840:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000842:	2200      	movs	r2, #0
 8000844:	2110      	movs	r1, #16
 8000846:	4822      	ldr	r0, [pc, #136]	; (80008d0 <ST7789_DrawFilledRectangle+0xac>)
 8000848:	f000 ff9f 	bl	800178a <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 800084c:	88fb      	ldrh	r3, [r7, #6]
 800084e:	2bef      	cmp	r3, #239	; 0xef
 8000850:	d83a      	bhi.n	80008c8 <ST7789_DrawFilledRectangle+0xa4>
 8000852:	88bb      	ldrh	r3, [r7, #4]
 8000854:	2bef      	cmp	r3, #239	; 0xef
 8000856:	d837      	bhi.n	80008c8 <ST7789_DrawFilledRectangle+0xa4>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8000858:	88fa      	ldrh	r2, [r7, #6]
 800085a:	887b      	ldrh	r3, [r7, #2]
 800085c:	4413      	add	r3, r2
 800085e:	2bef      	cmp	r3, #239	; 0xef
 8000860:	dd03      	ble.n	800086a <ST7789_DrawFilledRectangle+0x46>
		w = ST7789_WIDTH - x;
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000868:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 800086a:	88ba      	ldrh	r2, [r7, #4]
 800086c:	883b      	ldrh	r3, [r7, #0]
 800086e:	4413      	add	r3, r2
 8000870:	2bef      	cmp	r3, #239	; 0xef
 8000872:	dd03      	ble.n	800087c <ST7789_DrawFilledRectangle+0x58>
		h = ST7789_HEIGHT - y;
 8000874:	88bb      	ldrh	r3, [r7, #4]
 8000876:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800087a:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e017      	b.n	80008b2 <ST7789_DrawFilledRectangle+0x8e>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	b29a      	uxth	r2, r3
 8000886:	88bb      	ldrh	r3, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	b299      	uxth	r1, r3
 800088c:	88fa      	ldrh	r2, [r7, #6]
 800088e:	887b      	ldrh	r3, [r7, #2]
 8000890:	4413      	add	r3, r2
 8000892:	b29c      	uxth	r4, r3
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	b29a      	uxth	r2, r3
 8000898:	88bb      	ldrh	r3, [r7, #4]
 800089a:	4413      	add	r3, r2
 800089c:	b29a      	uxth	r2, r3
 800089e:	88f8      	ldrh	r0, [r7, #6]
 80008a0:	8c3b      	ldrh	r3, [r7, #32]
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	4613      	mov	r3, r2
 80008a6:	4622      	mov	r2, r4
 80008a8:	f7ff fe5e 	bl	8000568 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	3301      	adds	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	883a      	ldrh	r2, [r7, #0]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d2e2      	bcs.n	8000882 <ST7789_DrawFilledRectangle+0x5e>
	}
	ST7789_UnSelect();
 80008bc:	2201      	movs	r2, #1
 80008be:	2110      	movs	r1, #16
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <ST7789_DrawFilledRectangle+0xac>)
 80008c2:	f000 ff62 	bl	800178a <HAL_GPIO_WritePin>
 80008c6:	e000      	b.n	80008ca <ST7789_DrawFilledRectangle+0xa6>
		return;
 80008c8:	bf00      	nop
}
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd90      	pop	{r4, r7, pc}
 80008d0:	40010800 	.word	0x40010800

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d8:	f000 fc7e 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f809 	bl	80008f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e0:	f000 f87e 	bl	80009e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008e4:	f000 f846 	bl	8000974 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 80008e8:	f7ff fd3c 	bl	8000364 <ST7789_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MainMenu();
 80008ec:	f000 f8d8 	bl	8000aa0 <MainMenu>
 80008f0:	e7fc      	b.n	80008ec <main+0x18>

080008f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b090      	sub	sp, #64	; 0x40
 80008f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	2228      	movs	r2, #40	; 0x28
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f001 fdd5 	bl	80024b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	2310      	movs	r3, #16
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000920:	2302      	movs	r3, #2
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000924:	2300      	movs	r3, #0
 8000926:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000928:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800092c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092e:	f107 0318 	add.w	r3, r7, #24
 8000932:	4618      	mov	r0, r3
 8000934:	f000 ff42 	bl	80017bc <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800093e:	f000 fb41 	bl	8000fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	230f      	movs	r3, #15
 8000944:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2302      	movs	r3, #2
 8000948:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000952:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2102      	movs	r1, #2
 800095c:	4618      	mov	r0, r3
 800095e:	f001 f9ad 	bl	8001cbc <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000968:	f000 fb2c 	bl	8000fc4 <Error_Handler>
  }
}
 800096c:	bf00      	nop
 800096e:	3740      	adds	r7, #64	; 0x40
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_SPI1_Init+0x64>)
 800097a:	4a18      	ldr	r2, [pc, #96]	; (80009dc <MX_SPI1_Init+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_SPI1_Init+0x64>)
 8000980:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000984:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_SPI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_SPI1_Init+0x64>)
 8000994:	2202      	movs	r2, #2
 8000996:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_SPI1_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009a8:	2208      	movs	r2, #8
 80009aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009c0:	220a      	movs	r2, #10
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009c6:	f001 fae3 	bl	8001f90 <HAL_SPI_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009d0:	f000 faf8 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000134 	.word	0x20000134
 80009dc:	40013000 	.word	0x40013000

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <MX_GPIO_Init+0xb4>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a26      	ldr	r2, [pc, #152]	; (8000a94 <MX_GPIO_Init+0xb4>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <MX_GPIO_Init+0xb4>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_GPIO_Init+0xb4>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <MX_GPIO_Init+0xb4>)
 8000a12:	f043 0308 	orr.w	r3, r3, #8
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_GPIO_Init+0xb4>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0308 	and.w	r3, r3, #8
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2110      	movs	r1, #16
 8000a28:	481b      	ldr	r0, [pc, #108]	; (8000a98 <MX_GPIO_Init+0xb8>)
 8000a2a:	f000 feae 	bl	800178a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin|LED1_Pin|LED2_Pin
 8000a2e:	2200      	movs	r2, #0
 8000a30:	217b      	movs	r1, #123	; 0x7b
 8000a32:	481a      	ldr	r0, [pc, #104]	; (8000a9c <MX_GPIO_Init+0xbc>)
 8000a34:	f000 fea9 	bl	800178a <HAL_GPIO_WritePin>
                          |LED3_Pin|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8000a38:	2310      	movs	r3, #16
 8000a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2302      	movs	r3, #2
 8000a46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4812      	ldr	r0, [pc, #72]	; (8000a98 <MX_GPIO_Init+0xb8>)
 8000a50:	f000 fd2a 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin LED1_Pin LED2_Pin
                           LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin|LED1_Pin|LED2_Pin
 8000a54:	237b      	movs	r3, #123	; 0x7b
 8000a56:	60bb      	str	r3, [r7, #8]
                          |LED3_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2302      	movs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0308 	add.w	r3, r7, #8
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480c      	ldr	r0, [pc, #48]	; (8000a9c <MX_GPIO_Init+0xbc>)
 8000a6c:	f000 fd1c 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTNLEFT_Pin BTNDOWN_Pin BTNRIGHT_Pin BTNUP_Pin */
  GPIO_InitStruct.Pin = BTNLEFT_Pin|BTNDOWN_Pin|BTNRIGHT_Pin|BTNUP_Pin;
 8000a70:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000a74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	4619      	mov	r1, r3
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_GPIO_Init+0xb8>)
 8000a86:	f000 fd0f 	bl	80014a8 <HAL_GPIO_Init>

}
 8000a8a:	bf00      	nop
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010800 	.word	0x40010800
 8000a9c:	40010c00 	.word	0x40010c00

08000aa0 <MainMenu>:
int coord_medium[8][2];
int coord_hard[12][2];
int coord_bomb[0][0];

void MainMenu()
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af04      	add	r7, sp, #16
	ST7789_WriteString(25,20," Mine Field ", Font_16x26, BLACK, GREEN);
 8000aa6:	4b51      	ldr	r3, [pc, #324]	; (8000bec <MainMenu+0x14c>)
 8000aa8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000aac:	9202      	str	r2, [sp, #8]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	9201      	str	r2, [sp, #4]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	9200      	str	r2, [sp, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a4d      	ldr	r2, [pc, #308]	; (8000bf0 <MainMenu+0x150>)
 8000aba:	2114      	movs	r1, #20
 8000abc:	2019      	movs	r0, #25
 8000abe:	f7ff fe5f 	bl	8000780 <ST7789_WriteString>
	ST7789_WriteString(60,95," Play (UP) ", Font_11x18, WHITE, BLACK);
 8000ac2:	4b4c      	ldr	r3, [pc, #304]	; (8000bf4 <MainMenu+0x154>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	9202      	str	r2, [sp, #8]
 8000ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000acc:	9201      	str	r2, [sp, #4]
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	9200      	str	r2, [sp, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a48      	ldr	r2, [pc, #288]	; (8000bf8 <MainMenu+0x158>)
 8000ad6:	215f      	movs	r1, #95	; 0x5f
 8000ad8:	203c      	movs	r0, #60	; 0x3c
 8000ada:	f7ff fe51 	bl	8000780 <ST7789_WriteString>
	ST7789_WriteString(20,130," Difficulty (DOWN) ", Font_11x18, WHITE, BLACK);
 8000ade:	4b45      	ldr	r3, [pc, #276]	; (8000bf4 <MainMenu+0x154>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	9202      	str	r2, [sp, #8]
 8000ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae8:	9201      	str	r2, [sp, #4]
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	9200      	str	r2, [sp, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a42      	ldr	r2, [pc, #264]	; (8000bfc <MainMenu+0x15c>)
 8000af2:	2182      	movs	r1, #130	; 0x82
 8000af4:	2014      	movs	r0, #20
 8000af6:	f7ff fe43 	bl	8000780 <ST7789_WriteString>
	ST7789_WriteString(55,200," Confirm (RIGHT) ", Font_7x10, WHITE, BLACK);
 8000afa:	4b41      	ldr	r3, [pc, #260]	; (8000c00 <MainMenu+0x160>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	9202      	str	r2, [sp, #8]
 8000b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b04:	9201      	str	r2, [sp, #4]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	9200      	str	r2, [sp, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a3d      	ldr	r2, [pc, #244]	; (8000c04 <MainMenu+0x164>)
 8000b0e:	21c8      	movs	r1, #200	; 0xc8
 8000b10:	2037      	movs	r0, #55	; 0x37
 8000b12:	f7ff fe35 	bl	8000780 <ST7789_WriteString>

	if(BTNUP == 1)
 8000b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1a:	483b      	ldr	r0, [pc, #236]	; (8000c08 <MainMenu+0x168>)
 8000b1c:	f000 fe1e 	bl	800175c <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d103      	bne.n	8000b2e <MainMenu+0x8e>
		choice_menu = 1;
 8000b26:	4b39      	ldr	r3, [pc, #228]	; (8000c0c <MainMenu+0x16c>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	e00a      	b.n	8000b44 <MainMenu+0xa4>

	else if(BTNDOWN == 1)
 8000b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b32:	4835      	ldr	r0, [pc, #212]	; (8000c08 <MainMenu+0x168>)
 8000b34:	f000 fe12 	bl	800175c <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d102      	bne.n	8000b44 <MainMenu+0xa4>
		choice_menu = 2;
 8000b3e:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <MainMenu+0x16c>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	601a      	str	r2, [r3, #0]

	switch(choice_menu)
 8000b44:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <MainMenu+0x16c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d002      	beq.n	8000b52 <MainMenu+0xb2>
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d00f      	beq.n	8000b70 <MainMenu+0xd0>
 8000b50:	e01d      	b.n	8000b8e <MainMenu+0xee>
	{
		case 1:
			ST7789_WriteString(60,95," Play (UP) ", Font_11x18, BLACK, LIGHTGREEN);
 8000b52:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <MainMenu+0x154>)
 8000b54:	f248 421f 	movw	r2, #33823	; 0x841f
 8000b58:	9202      	str	r2, [sp, #8]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	9201      	str	r2, [sp, #4]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	9200      	str	r2, [sp, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a24      	ldr	r2, [pc, #144]	; (8000bf8 <MainMenu+0x158>)
 8000b66:	215f      	movs	r1, #95	; 0x5f
 8000b68:	203c      	movs	r0, #60	; 0x3c
 8000b6a:	f7ff fe09 	bl	8000780 <ST7789_WriteString>
		break;
 8000b6e:	e00e      	b.n	8000b8e <MainMenu+0xee>

		case 2:
			ST7789_WriteString(20,130," Difficulty (DOWN) ", Font_11x18, BLACK, LIGHTGREEN);
 8000b70:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <MainMenu+0x154>)
 8000b72:	f248 421f 	movw	r2, #33823	; 0x841f
 8000b76:	9202      	str	r2, [sp, #8]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	9201      	str	r2, [sp, #4]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <MainMenu+0x15c>)
 8000b84:	2182      	movs	r1, #130	; 0x82
 8000b86:	2014      	movs	r0, #20
 8000b88:	f7ff fdfa 	bl	8000780 <ST7789_WriteString>
		break;
 8000b8c:	bf00      	nop
	}

	if(BTNRIGHT == 1)
 8000b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b92:	481d      	ldr	r0, [pc, #116]	; (8000c08 <MainMenu+0x168>)
 8000b94:	f000 fde2 	bl	800175c <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <MainMenu+0x104>
		confirm_choice = 1;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MainMenu+0x170>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]

	if(choice_menu == 1 && confirm_choice == 1)
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <MainMenu+0x16c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d10c      	bne.n	8000bc6 <MainMenu+0x126>
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MainMenu+0x170>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d108      	bne.n	8000bc6 <MainMenu+0x126>
	{
		confirm_choice = 0;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MainMenu+0x170>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
		ST7789_Fill_Color(BLACK);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff fc70 	bl	80004a0 <ST7789_Fill_Color>
		DrawBomb();
 8000bc0:	f000 f932 	bl	8000e28 <DrawBomb>
	{
		confirm_choice = 0;
		ST7789_Fill_Color(BLACK);
		DifficultyBomb();
	}
}
 8000bc4:	e00f      	b.n	8000be6 <MainMenu+0x146>
	else if (choice_menu == 2 && confirm_choice == 1)
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MainMenu+0x16c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d10b      	bne.n	8000be6 <MainMenu+0x146>
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MainMenu+0x170>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d107      	bne.n	8000be6 <MainMenu+0x146>
		confirm_choice = 0;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MainMenu+0x170>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
		ST7789_Fill_Color(BLACK);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fc5f 	bl	80004a0 <ST7789_Fill_Color>
		DifficultyBomb();
 8000be2:	f000 f817 	bl	8000c14 <DifficultyBomb>
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000010 	.word	0x20000010
 8000bf0:	080026e4 	.word	0x080026e4
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	080026f4 	.word	0x080026f4
 8000bfc:	08002700 	.word	0x08002700
 8000c00:	20000000 	.word	0x20000000
 8000c04:	08002714 	.word	0x08002714
 8000c08:	40010800 	.word	0x40010800
 8000c0c:	200000a4 	.word	0x200000a4
 8000c10:	200000a8 	.word	0x200000a8

08000c14 <DifficultyBomb>:

void DifficultyBomb (void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af04      	add	r7, sp, #16
	while (confirm_bomb == 0)
 8000c1a:	e0a8      	b.n	8000d6e <DifficultyBomb+0x15a>
	{
		ST7789_WriteString(25,20," Mine Field ", Font_16x26, BLACK, GREEN);
 8000c1c:	4b76      	ldr	r3, [pc, #472]	; (8000df8 <DifficultyBomb+0x1e4>)
 8000c1e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000c22:	9202      	str	r2, [sp, #8]
 8000c24:	2200      	movs	r2, #0
 8000c26:	9201      	str	r2, [sp, #4]
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	9200      	str	r2, [sp, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a73      	ldr	r2, [pc, #460]	; (8000dfc <DifficultyBomb+0x1e8>)
 8000c30:	2114      	movs	r1, #20
 8000c32:	2019      	movs	r0, #25
 8000c34:	f7ff fda4 	bl	8000780 <ST7789_WriteString>
		ST7789_WriteString(45,75," 4 bombs (UP) ", Font_11x18, WHITE, BLACK);
 8000c38:	4b71      	ldr	r3, [pc, #452]	; (8000e00 <DifficultyBomb+0x1ec>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	9202      	str	r2, [sp, #8]
 8000c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c42:	9201      	str	r2, [sp, #4]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	9200      	str	r2, [sp, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a6e      	ldr	r2, [pc, #440]	; (8000e04 <DifficultyBomb+0x1f0>)
 8000c4c:	214b      	movs	r1, #75	; 0x4b
 8000c4e:	202d      	movs	r0, #45	; 0x2d
 8000c50:	f7ff fd96 	bl	8000780 <ST7789_WriteString>
		ST7789_WriteString(35,120," 8 bombs (LEFT) ", Font_11x18, WHITE, BLACK);
 8000c54:	4b6a      	ldr	r3, [pc, #424]	; (8000e00 <DifficultyBomb+0x1ec>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	9202      	str	r2, [sp, #8]
 8000c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c5e:	9201      	str	r2, [sp, #4]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	9200      	str	r2, [sp, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a68      	ldr	r2, [pc, #416]	; (8000e08 <DifficultyBomb+0x1f4>)
 8000c68:	2178      	movs	r1, #120	; 0x78
 8000c6a:	2023      	movs	r0, #35	; 0x23
 8000c6c:	f7ff fd88 	bl	8000780 <ST7789_WriteString>
		ST7789_WriteString(30,165," 12 bombs (DOWN) ", Font_11x18, WHITE, BLACK);
 8000c70:	4b63      	ldr	r3, [pc, #396]	; (8000e00 <DifficultyBomb+0x1ec>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	9202      	str	r2, [sp, #8]
 8000c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c7a:	9201      	str	r2, [sp, #4]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	9200      	str	r2, [sp, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a62      	ldr	r2, [pc, #392]	; (8000e0c <DifficultyBomb+0x1f8>)
 8000c84:	21a5      	movs	r1, #165	; 0xa5
 8000c86:	201e      	movs	r0, #30
 8000c88:	f7ff fd7a 	bl	8000780 <ST7789_WriteString>
		ST7789_WriteString(60,220," Confirm (RIGHT) ", Font_7x10, WHITE, BLACK);
 8000c8c:	4b60      	ldr	r3, [pc, #384]	; (8000e10 <DifficultyBomb+0x1fc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	9202      	str	r2, [sp, #8]
 8000c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c96:	9201      	str	r2, [sp, #4]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	9200      	str	r2, [sp, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a5d      	ldr	r2, [pc, #372]	; (8000e14 <DifficultyBomb+0x200>)
 8000ca0:	21dc      	movs	r1, #220	; 0xdc
 8000ca2:	203c      	movs	r0, #60	; 0x3c
 8000ca4:	f7ff fd6c 	bl	8000780 <ST7789_WriteString>

		if(BTNUP == 1)
 8000ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cac:	485a      	ldr	r0, [pc, #360]	; (8000e18 <DifficultyBomb+0x204>)
 8000cae:	f000 fd55 	bl	800175c <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d103      	bne.n	8000cc0 <DifficultyBomb+0xac>
			choice_bomb = 1;
 8000cb8:	4b58      	ldr	r3, [pc, #352]	; (8000e1c <DifficultyBomb+0x208>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e016      	b.n	8000cee <DifficultyBomb+0xda>

		else if(BTNLEFT == 1)
 8000cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc4:	4854      	ldr	r0, [pc, #336]	; (8000e18 <DifficultyBomb+0x204>)
 8000cc6:	f000 fd49 	bl	800175c <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d103      	bne.n	8000cd8 <DifficultyBomb+0xc4>
			choice_bomb = 2;
 8000cd0:	4b52      	ldr	r3, [pc, #328]	; (8000e1c <DifficultyBomb+0x208>)
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	e00a      	b.n	8000cee <DifficultyBomb+0xda>

		else if(BTNDOWN == 1)
 8000cd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cdc:	484e      	ldr	r0, [pc, #312]	; (8000e18 <DifficultyBomb+0x204>)
 8000cde:	f000 fd3d 	bl	800175c <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <DifficultyBomb+0xda>
			choice_bomb = 3;
 8000ce8:	4b4c      	ldr	r3, [pc, #304]	; (8000e1c <DifficultyBomb+0x208>)
 8000cea:	2203      	movs	r2, #3
 8000cec:	601a      	str	r2, [r3, #0]

		switch(choice_bomb)
 8000cee:	4b4b      	ldr	r3, [pc, #300]	; (8000e1c <DifficultyBomb+0x208>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d012      	beq.n	8000d1c <DifficultyBomb+0x108>
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d01f      	beq.n	8000d3a <DifficultyBomb+0x126>
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d12c      	bne.n	8000d58 <DifficultyBomb+0x144>
		{
			case 1:
				ST7789_WriteString(45,75," 4 bombs (UP) ", Font_11x18, BLACK, LIGHTGREEN);
 8000cfe:	4b40      	ldr	r3, [pc, #256]	; (8000e00 <DifficultyBomb+0x1ec>)
 8000d00:	f248 421f 	movw	r2, #33823	; 0x841f
 8000d04:	9202      	str	r2, [sp, #8]
 8000d06:	2200      	movs	r2, #0
 8000d08:	9201      	str	r2, [sp, #4]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	9200      	str	r2, [sp, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a3c      	ldr	r2, [pc, #240]	; (8000e04 <DifficultyBomb+0x1f0>)
 8000d12:	214b      	movs	r1, #75	; 0x4b
 8000d14:	202d      	movs	r0, #45	; 0x2d
 8000d16:	f7ff fd33 	bl	8000780 <ST7789_WriteString>
			break;
 8000d1a:	e01d      	b.n	8000d58 <DifficultyBomb+0x144>

			case 2:
				ST7789_WriteString(35,120," 8 bombs (LEFT) ", Font_11x18, BLACK, LIGHTGREEN);
 8000d1c:	4b38      	ldr	r3, [pc, #224]	; (8000e00 <DifficultyBomb+0x1ec>)
 8000d1e:	f248 421f 	movw	r2, #33823	; 0x841f
 8000d22:	9202      	str	r2, [sp, #8]
 8000d24:	2200      	movs	r2, #0
 8000d26:	9201      	str	r2, [sp, #4]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	9200      	str	r2, [sp, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a36      	ldr	r2, [pc, #216]	; (8000e08 <DifficultyBomb+0x1f4>)
 8000d30:	2178      	movs	r1, #120	; 0x78
 8000d32:	2023      	movs	r0, #35	; 0x23
 8000d34:	f7ff fd24 	bl	8000780 <ST7789_WriteString>
			break;
 8000d38:	e00e      	b.n	8000d58 <DifficultyBomb+0x144>

			case 3:
				ST7789_WriteString(30,165," 12 bombs (DOWN) ", Font_11x18, BLACK, LIGHTGREEN);
 8000d3a:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <DifficultyBomb+0x1ec>)
 8000d3c:	f248 421f 	movw	r2, #33823	; 0x841f
 8000d40:	9202      	str	r2, [sp, #8]
 8000d42:	2200      	movs	r2, #0
 8000d44:	9201      	str	r2, [sp, #4]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	9200      	str	r2, [sp, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a2f      	ldr	r2, [pc, #188]	; (8000e0c <DifficultyBomb+0x1f8>)
 8000d4e:	21a5      	movs	r1, #165	; 0xa5
 8000d50:	201e      	movs	r0, #30
 8000d52:	f7ff fd15 	bl	8000780 <ST7789_WriteString>
			break;
 8000d56:	bf00      	nop
		}

		if(BTNRIGHT == 1)
 8000d58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d5c:	482e      	ldr	r0, [pc, #184]	; (8000e18 <DifficultyBomb+0x204>)
 8000d5e:	f000 fcfd 	bl	800175c <HAL_GPIO_ReadPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <DifficultyBomb+0x15a>
			confirm_bomb = 1;
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <DifficultyBomb+0x20c>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
	while (confirm_bomb == 0)
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <DifficultyBomb+0x20c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f43f af52 	beq.w	8000c1c <DifficultyBomb+0x8>
	}

	if(choice_bomb == 1 && confirm_bomb == 1)
 8000d78:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <DifficultyBomb+0x208>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d10f      	bne.n	8000da0 <DifficultyBomb+0x18c>
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <DifficultyBomb+0x20c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d10b      	bne.n	8000da0 <DifficultyBomb+0x18c>
	{
		confirm_bomb = 0;
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <DifficultyBomb+0x20c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
		bombs = 4;
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <DifficultyBomb+0x210>)
 8000d90:	2204      	movs	r2, #4
 8000d92:	601a      	str	r2, [r3, #0]
		ST7789_Fill_Color(BLACK);
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff fb83 	bl	80004a0 <ST7789_Fill_Color>
		MainMenu();
 8000d9a:	f7ff fe81 	bl	8000aa0 <MainMenu>
 8000d9e:	e027      	b.n	8000df0 <DifficultyBomb+0x1dc>
	}

	else if (choice_bomb == 2 && confirm_bomb == 1)
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <DifficultyBomb+0x208>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d10f      	bne.n	8000dc8 <DifficultyBomb+0x1b4>
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <DifficultyBomb+0x20c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d10b      	bne.n	8000dc8 <DifficultyBomb+0x1b4>
	{
		confirm_bomb = 0;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <DifficultyBomb+0x20c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
		bombs = 8;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <DifficultyBomb+0x210>)
 8000db8:	2208      	movs	r2, #8
 8000dba:	601a      	str	r2, [r3, #0]
		ST7789_Fill_Color(BLACK);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f7ff fb6f 	bl	80004a0 <ST7789_Fill_Color>
		MainMenu();
 8000dc2:	f7ff fe6d 	bl	8000aa0 <MainMenu>
 8000dc6:	e013      	b.n	8000df0 <DifficultyBomb+0x1dc>
	}

	else if (choice_bomb == 3 && confirm_bomb == 1)
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <DifficultyBomb+0x208>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d10f      	bne.n	8000df0 <DifficultyBomb+0x1dc>
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <DifficultyBomb+0x20c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d10b      	bne.n	8000df0 <DifficultyBomb+0x1dc>
	{
		confirm_bomb = 0;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <DifficultyBomb+0x20c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
		bombs = 12;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <DifficultyBomb+0x210>)
 8000de0:	220c      	movs	r2, #12
 8000de2:	601a      	str	r2, [r3, #0]
		ST7789_Fill_Color(BLACK);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff fb5b 	bl	80004a0 <ST7789_Fill_Color>
		MainMenu();
 8000dea:	f7ff fe59 	bl	8000aa0 <MainMenu>
	}

}
 8000dee:	e7ff      	b.n	8000df0 <DifficultyBomb+0x1dc>
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000010 	.word	0x20000010
 8000dfc:	080026e4 	.word	0x080026e4
 8000e00:	20000008 	.word	0x20000008
 8000e04:	08002728 	.word	0x08002728
 8000e08:	08002738 	.word	0x08002738
 8000e0c:	0800274c 	.word	0x0800274c
 8000e10:	20000000 	.word	0x20000000
 8000e14:	08002714 	.word	0x08002714
 8000e18:	40010800 	.word	0x40010800
 8000e1c:	200000ac 	.word	0x200000ac
 8000e20:	200000b0 	.word	0x200000b0
 8000e24:	200000b4 	.word	0x200000b4

08000e28 <DrawBomb>:

void DrawBomb (void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af02      	add	r7, sp, #8
	for (int k = 0; k < bombs; k++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	e082      	b.n	8000f3a <DrawBomb+0x112>
	{
		do
		{
		x_bomb = rand() % 6 + 1;
 8000e34:	f001 fb44 	bl	80024c0 <rand>
 8000e38:	4601      	mov	r1, r0
 8000e3a:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <DrawBomb+0x130>)
 8000e3c:	fb83 3201 	smull	r3, r2, r3, r1
 8000e40:	17cb      	asrs	r3, r1, #31
 8000e42:	1ad2      	subs	r2, r2, r3
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	1aca      	subs	r2, r1, r3
 8000e4e:	1c53      	adds	r3, r2, #1
 8000e50:	4a42      	ldr	r2, [pc, #264]	; (8000f5c <DrawBomb+0x134>)
 8000e52:	6013      	str	r3, [r2, #0]
		y_bomb = (rand() % (7 - 2 + 1)) + 2;
 8000e54:	f001 fb34 	bl	80024c0 <rand>
 8000e58:	4601      	mov	r1, r0
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <DrawBomb+0x130>)
 8000e5c:	fb83 3201 	smull	r3, r2, r3, r1
 8000e60:	17cb      	asrs	r3, r1, #31
 8000e62:	1ad2      	subs	r2, r2, r3
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	1aca      	subs	r2, r1, r3
 8000e6e:	1c93      	adds	r3, r2, #2
 8000e70:	4a3b      	ldr	r2, [pc, #236]	; (8000f60 <DrawBomb+0x138>)
 8000e72:	6013      	str	r3, [r2, #0]
		}
		while (CheckCoord(x_bomb, y_bomb));
 8000e74:	4b39      	ldr	r3, [pc, #228]	; (8000f5c <DrawBomb+0x134>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b39      	ldr	r3, [pc, #228]	; (8000f60 <DrawBomb+0x138>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4610      	mov	r0, r2
 8000e80:	f000 f87c 	bl	8000f7c <CheckCoord>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1d4      	bne.n	8000e34 <DrawBomb+0xc>

		switch (choice_bomb)
 8000e8a:	4b36      	ldr	r3, [pc, #216]	; (8000f64 <DrawBomb+0x13c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d015      	beq.n	8000ebe <DrawBomb+0x96>
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d025      	beq.n	8000ee2 <DrawBomb+0xba>
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d135      	bne.n	8000f06 <DrawBomb+0xde>
		{
		case 1:
			coord_easy[k][0] = x_bomb;
 8000e9a:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <DrawBomb+0x134>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4932      	ldr	r1, [pc, #200]	; (8000f68 <DrawBomb+0x140>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			coord_easy[k][1] = y_bomb;
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	; (8000f60 <DrawBomb+0x138>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	492f      	ldr	r1, [pc, #188]	; (8000f68 <DrawBomb+0x140>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	605a      	str	r2, [r3, #4]
			coord_bomb[0][0] = coord_easy[4][2];
 8000eb4:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <DrawBomb+0x140>)
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	4a2c      	ldr	r2, [pc, #176]	; (8000f6c <DrawBomb+0x144>)
 8000eba:	6013      	str	r3, [r2, #0]
		break;
 8000ebc:	e023      	b.n	8000f06 <DrawBomb+0xde>

		case 2:
			coord_medium[k][0] = x_bomb;
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <DrawBomb+0x134>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	492b      	ldr	r1, [pc, #172]	; (8000f70 <DrawBomb+0x148>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			coord_medium[k][1] = y_bomb;
 8000eca:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <DrawBomb+0x138>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4928      	ldr	r1, [pc, #160]	; (8000f70 <DrawBomb+0x148>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	440b      	add	r3, r1
 8000ed6:	605a      	str	r2, [r3, #4]
			coord_bomb[0][0] = coord_medium[8][2];
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <DrawBomb+0x148>)
 8000eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000edc:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <DrawBomb+0x144>)
 8000ede:	6013      	str	r3, [r2, #0]
		break;
 8000ee0:	e011      	b.n	8000f06 <DrawBomb+0xde>

		case 3:
			coord_hard[k][0] = x_bomb;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <DrawBomb+0x134>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4923      	ldr	r1, [pc, #140]	; (8000f74 <DrawBomb+0x14c>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			coord_hard[k][1] = y_bomb;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <DrawBomb+0x138>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4920      	ldr	r1, [pc, #128]	; (8000f74 <DrawBomb+0x14c>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	440b      	add	r3, r1
 8000efa:	605a      	str	r2, [r3, #4]
			coord_bomb[0][0] = coord_hard[12][2];
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <DrawBomb+0x14c>)
 8000efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f00:	4a1a      	ldr	r2, [pc, #104]	; (8000f6c <DrawBomb+0x144>)
 8000f02:	6013      	str	r3, [r2, #0]
		break;
 8000f04:	bf00      	nop
		}
		ST7789_DrawFilledRectangle((x_bomb*30), (y_bomb*30), 30, 30, MAGENTA);
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <DrawBomb+0x134>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	b298      	uxth	r0, r3
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <DrawBomb+0x138>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	b299      	uxth	r1, r3
 8000f26:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	231e      	movs	r3, #30
 8000f2e:	221e      	movs	r2, #30
 8000f30:	f7ff fc78 	bl	8000824 <ST7789_DrawFilledRectangle>
	for (int k = 0; k < bombs; k++)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3301      	adds	r3, #1
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <DrawBomb+0x150>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	f6ff af77 	blt.w	8000e34 <DrawBomb+0xc>
	}
	HAL_Delay(10000);
 8000f46:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f4a:	f000 f9a7 	bl	800129c <HAL_Delay>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2aaaaaab 	.word	0x2aaaaaab
 8000f5c:	2000010c 	.word	0x2000010c
 8000f60:	200000c8 	.word	0x200000c8
 8000f64:	200000ac 	.word	0x200000ac
 8000f68:	20000114 	.word	0x20000114
 8000f6c:	200001ec 	.word	0x200001ec
 8000f70:	200000cc 	.word	0x200000cc
 8000f74:	2000018c 	.word	0x2000018c
 8000f78:	200000b4 	.word	0x200000b4

08000f7c <CheckCoord>:

int CheckCoord (int x, int y)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	for (int l = 0; l < bombs; l++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	e00d      	b.n	8000fa8 <CheckCoord+0x2c>
		{
			if (coord_bomb[l][0] == x && coord_bomb[l][1])
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <CheckCoord+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d105      	bne.n	8000fa2 <CheckCoord+0x26>
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <CheckCoord+0x40>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <CheckCoord+0x26>
				return 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e007      	b.n	8000fb2 <CheckCoord+0x36>
	for (int l = 0; l < bombs; l++)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <CheckCoord+0x44>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dbec      	blt.n	8000f8c <CheckCoord+0x10>
		}
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	200001ec 	.word	0x200001ec
 8000fc0:	200000b4 	.word	0x200000b4

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fca:	e7fe      	b.n	8000fca <Error_Handler+0x6>

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_MspInit+0x5c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4a14      	ldr	r2, [pc, #80]	; (8001028 <HAL_MspInit+0x5c>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6193      	str	r3, [r2, #24]
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_MspInit+0x5c>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <HAL_MspInit+0x5c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_MspInit+0x5c>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_MspInit+0x5c>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_MspInit+0x60>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_MspInit+0x60>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000

08001030 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <HAL_SPI_MspInit+0x88>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d12f      	bne.n	80010b0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_SPI_MspInit+0x8c>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a19      	ldr	r2, [pc, #100]	; (80010bc <HAL_SPI_MspInit+0x8c>)
 8001056:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_SPI_MspInit+0x8c>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_SPI_MspInit+0x8c>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a13      	ldr	r2, [pc, #76]	; (80010bc <HAL_SPI_MspInit+0x8c>)
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_SPI_MspInit+0x8c>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001080:	23a0      	movs	r3, #160	; 0xa0
 8001082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4619      	mov	r1, r3
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <HAL_SPI_MspInit+0x90>)
 8001094:	f000 fa08 	bl	80014a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001098:	2340      	movs	r3, #64	; 0x40
 800109a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4619      	mov	r1, r3
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <HAL_SPI_MspInit+0x90>)
 80010ac:	f000 f9fc 	bl	80014a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40013000 	.word	0x40013000
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010800 	.word	0x40010800

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110a:	f000 f8ab 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f001 f98a 	bl	800245c <__errno>
 8001148:	4602      	mov	r2, r0
 800114a:	230c      	movs	r3, #12
 800114c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20005000 	.word	0x20005000
 8001174:	00000400 	.word	0x00000400
 8001178:	200000b8 	.word	0x200000b8
 800117c:	200001f8 	.word	0x200001f8

08001180 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118e:	490d      	ldr	r1, [pc, #52]	; (80011c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a4:	4c0a      	ldr	r4, [pc, #40]	; (80011d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011b2:	f7ff ffe5 	bl	8001180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f001 f957 	bl	8002468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ba:	f7ff fb8b 	bl	80008d4 <main>
  bx lr
 80011be:	4770      	bx	lr
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80011c8:	08004fa0 	.word	0x08004fa0
  ldr r2, =_sbss
 80011cc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80011d0:	200001f4 	.word	0x200001f4

080011d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x28>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x28>)
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f929 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff feea 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f933 	bl	800148e <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f909 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000018 	.word	0x20000018
 800125c:	20000020 	.word	0x20000020
 8001260:	2000001c 	.word	0x2000001c

08001264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x1c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x20>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_IncTick+0x20>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	20000020 	.word	0x20000020
 8001284:	200001ec 	.word	0x200001ec

08001288 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <HAL_GetTick+0x10>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	200001ec 	.word	0x200001ec

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff fff0 	bl	8001288 <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b4:	d005      	beq.n	80012c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_Delay+0x40>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c2:	bf00      	nop
 80012c4:	f7ff ffe0 	bl	8001288 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f7      	bhi.n	80012c4 <HAL_Delay+0x28>
  {
  }
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000020 	.word	0x20000020

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff90 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff49 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff5e 	bl	8001328 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff90 	bl	8001398 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5f 	bl	8001344 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffb0 	bl	80013fc <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b08b      	sub	sp, #44	; 0x2c
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ba:	e127      	b.n	800170c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014bc:	2201      	movs	r2, #1
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f040 8116 	bne.w	8001706 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d034      	beq.n	800154c <HAL_GPIO_Init+0xa4>
 80014e2:	2b12      	cmp	r3, #18
 80014e4:	d80d      	bhi.n	8001502 <HAL_GPIO_Init+0x5a>
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d02b      	beq.n	8001542 <HAL_GPIO_Init+0x9a>
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d804      	bhi.n	80014f8 <HAL_GPIO_Init+0x50>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d031      	beq.n	8001556 <HAL_GPIO_Init+0xae>
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d01c      	beq.n	8001530 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014f6:	e048      	b.n	800158a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d043      	beq.n	8001584 <HAL_GPIO_Init+0xdc>
 80014fc:	2b11      	cmp	r3, #17
 80014fe:	d01b      	beq.n	8001538 <HAL_GPIO_Init+0x90>
          break;
 8001500:	e043      	b.n	800158a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001502:	4a89      	ldr	r2, [pc, #548]	; (8001728 <HAL_GPIO_Init+0x280>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d026      	beq.n	8001556 <HAL_GPIO_Init+0xae>
 8001508:	4a87      	ldr	r2, [pc, #540]	; (8001728 <HAL_GPIO_Init+0x280>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d806      	bhi.n	800151c <HAL_GPIO_Init+0x74>
 800150e:	4a87      	ldr	r2, [pc, #540]	; (800172c <HAL_GPIO_Init+0x284>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d020      	beq.n	8001556 <HAL_GPIO_Init+0xae>
 8001514:	4a86      	ldr	r2, [pc, #536]	; (8001730 <HAL_GPIO_Init+0x288>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d01d      	beq.n	8001556 <HAL_GPIO_Init+0xae>
          break;
 800151a:	e036      	b.n	800158a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800151c:	4a85      	ldr	r2, [pc, #532]	; (8001734 <HAL_GPIO_Init+0x28c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0xae>
 8001522:	4a85      	ldr	r2, [pc, #532]	; (8001738 <HAL_GPIO_Init+0x290>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d016      	beq.n	8001556 <HAL_GPIO_Init+0xae>
 8001528:	4a84      	ldr	r2, [pc, #528]	; (800173c <HAL_GPIO_Init+0x294>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d013      	beq.n	8001556 <HAL_GPIO_Init+0xae>
          break;
 800152e:	e02c      	b.n	800158a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	623b      	str	r3, [r7, #32]
          break;
 8001536:	e028      	b.n	800158a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	3304      	adds	r3, #4
 800153e:	623b      	str	r3, [r7, #32]
          break;
 8001540:	e023      	b.n	800158a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	3308      	adds	r3, #8
 8001548:	623b      	str	r3, [r7, #32]
          break;
 800154a:	e01e      	b.n	800158a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	330c      	adds	r3, #12
 8001552:	623b      	str	r3, [r7, #32]
          break;
 8001554:	e019      	b.n	800158a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800155e:	2304      	movs	r3, #4
 8001560:	623b      	str	r3, [r7, #32]
          break;
 8001562:	e012      	b.n	800158a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d105      	bne.n	8001578 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800156c:	2308      	movs	r3, #8
 800156e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	611a      	str	r2, [r3, #16]
          break;
 8001576:	e008      	b.n	800158a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001578:	2308      	movs	r3, #8
 800157a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	615a      	str	r2, [r3, #20]
          break;
 8001582:	e002      	b.n	800158a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
          break;
 8001588:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2bff      	cmp	r3, #255	; 0xff
 800158e:	d801      	bhi.n	8001594 <HAL_GPIO_Init+0xec>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	e001      	b.n	8001598 <HAL_GPIO_Init+0xf0>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3304      	adds	r3, #4
 8001598:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2bff      	cmp	r3, #255	; 0xff
 800159e:	d802      	bhi.n	80015a6 <HAL_GPIO_Init+0xfe>
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_Init+0x104>
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	3b08      	subs	r3, #8
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	210f      	movs	r1, #15
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	401a      	ands	r2, r3
 80015be:	6a39      	ldr	r1, [r7, #32]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	431a      	orrs	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8096 	beq.w	8001706 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015da:	4b59      	ldr	r3, [pc, #356]	; (8001740 <HAL_GPIO_Init+0x298>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	4a58      	ldr	r2, [pc, #352]	; (8001740 <HAL_GPIO_Init+0x298>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6193      	str	r3, [r2, #24]
 80015e6:	4b56      	ldr	r3, [pc, #344]	; (8001740 <HAL_GPIO_Init+0x298>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015f2:	4a54      	ldr	r2, [pc, #336]	; (8001744 <HAL_GPIO_Init+0x29c>)
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4013      	ands	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4b      	ldr	r2, [pc, #300]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0x19e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4a      	ldr	r2, [pc, #296]	; (800174c <HAL_GPIO_Init+0x2a4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00d      	beq.n	8001642 <HAL_GPIO_Init+0x19a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a49      	ldr	r2, [pc, #292]	; (8001750 <HAL_GPIO_Init+0x2a8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d007      	beq.n	800163e <HAL_GPIO_Init+0x196>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a48      	ldr	r2, [pc, #288]	; (8001754 <HAL_GPIO_Init+0x2ac>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_GPIO_Init+0x192>
 8001636:	2303      	movs	r3, #3
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x1a0>
 800163a:	2304      	movs	r3, #4
 800163c:	e004      	b.n	8001648 <HAL_GPIO_Init+0x1a0>
 800163e:	2302      	movs	r3, #2
 8001640:	e002      	b.n	8001648 <HAL_GPIO_Init+0x1a0>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_GPIO_Init+0x1a0>
 8001646:	2300      	movs	r3, #0
 8001648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164a:	f002 0203 	and.w	r2, r2, #3
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	4093      	lsls	r3, r2
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001658:	493a      	ldr	r1, [pc, #232]	; (8001744 <HAL_GPIO_Init+0x29c>)
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001672:	4b39      	ldr	r3, [pc, #228]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4938      	ldr	r1, [pc, #224]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
 800167e:	e006      	b.n	800168e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001680:	4b35      	ldr	r3, [pc, #212]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	43db      	mvns	r3, r3
 8001688:	4933      	ldr	r1, [pc, #204]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 800168a:	4013      	ands	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	492e      	ldr	r1, [pc, #184]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
 80016a6:	e006      	b.n	80016b6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	4929      	ldr	r1, [pc, #164]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d006      	beq.n	80016d0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	4924      	ldr	r1, [pc, #144]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
 80016ce:	e006      	b.n	80016de <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016d0:	4b21      	ldr	r3, [pc, #132]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	491f      	ldr	r1, [pc, #124]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 80016da:	4013      	ands	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	491a      	ldr	r1, [pc, #104]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60cb      	str	r3, [r1, #12]
 80016f6:	e006      	b.n	8001706 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	43db      	mvns	r3, r3
 8001700:	4915      	ldr	r1, [pc, #84]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 8001702:	4013      	ands	r3, r2
 8001704:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	3301      	adds	r3, #1
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	fa22 f303 	lsr.w	r3, r2, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	f47f aed0 	bne.w	80014bc <HAL_GPIO_Init+0x14>
  }
}
 800171c:	bf00      	nop
 800171e:	372c      	adds	r7, #44	; 0x2c
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	10210000 	.word	0x10210000
 800172c:	10110000 	.word	0x10110000
 8001730:	10120000 	.word	0x10120000
 8001734:	10310000 	.word	0x10310000
 8001738:	10320000 	.word	0x10320000
 800173c:	10220000 	.word	0x10220000
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000
 8001748:	40010800 	.word	0x40010800
 800174c:	40010c00 	.word	0x40010c00
 8001750:	40011000 	.word	0x40011000
 8001754:	40011400 	.word	0x40011400
 8001758:	40010400 	.word	0x40010400

0800175c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e001      	b.n	800177e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	807b      	strh	r3, [r7, #2]
 8001796:	4613      	mov	r3, r2
 8001798:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179a:	787b      	ldrb	r3, [r7, #1]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017a6:	e003      	b.n	80017b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	041a      	lsls	r2, r3, #16
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	611a      	str	r2, [r3, #16]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
	...

080017bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e26c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8087 	beq.w	80018ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017dc:	4b92      	ldr	r3, [pc, #584]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d00c      	beq.n	8001802 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017e8:	4b8f      	ldr	r3, [pc, #572]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d112      	bne.n	800181a <HAL_RCC_OscConfig+0x5e>
 80017f4:	4b8c      	ldr	r3, [pc, #560]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001800:	d10b      	bne.n	800181a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001802:	4b89      	ldr	r3, [pc, #548]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d06c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x12c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d168      	bne.n	80018e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e246      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x76>
 8001824:	4b80      	ldr	r3, [pc, #512]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a7f      	ldr	r2, [pc, #508]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800182a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e02e      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x98>
 800183a:	4b7b      	ldr	r3, [pc, #492]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7a      	ldr	r2, [pc, #488]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b78      	ldr	r3, [pc, #480]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a77      	ldr	r2, [pc, #476]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800184c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e01d      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0xbc>
 800185e:	4b72      	ldr	r3, [pc, #456]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a71      	ldr	r2, [pc, #452]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b6f      	ldr	r3, [pc, #444]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a6e      	ldr	r2, [pc, #440]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001878:	4b6b      	ldr	r3, [pc, #428]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6a      	ldr	r2, [pc, #424]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800187e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a67      	ldr	r2, [pc, #412]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fcf6 	bl	8001288 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff fcf2 	bl	8001288 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e1fa      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0xe4>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fce2 	bl	8001288 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff fcde 	bl	8001288 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	; 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e1e6      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x10c>
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d063      	beq.n	80019be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018f6:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001902:	4b49      	ldr	r3, [pc, #292]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b08      	cmp	r3, #8
 800190c:	d11c      	bne.n	8001948 <HAL_RCC_OscConfig+0x18c>
 800190e:	4b46      	ldr	r3, [pc, #280]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x176>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e1ba      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4939      	ldr	r1, [pc, #228]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	e03a      	b.n	80019be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001950:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff fc97 	bl	8001288 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff fc93 	bl	8001288 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e19b      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4927      	ldr	r1, [pc, #156]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fc76 	bl	8001288 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff fc72 	bl	8001288 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e17a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d03a      	beq.n	8001a40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d019      	beq.n	8001a06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_RCC_OscConfig+0x274>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7ff fc56 	bl	8001288 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff fc52 	bl	8001288 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e15a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f000 faa8 	bl	8001f54 <RCC_Delay>
 8001a04:	e01c      	b.n	8001a40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_RCC_OscConfig+0x274>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fc3c 	bl	8001288 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a12:	e00f      	b.n	8001a34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff fc38 	bl	8001288 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d908      	bls.n	8001a34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e140      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	42420000 	.word	0x42420000
 8001a30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a34:	4b9e      	ldr	r3, [pc, #632]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1e9      	bne.n	8001a14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80a6 	beq.w	8001b9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a52:	4b97      	ldr	r3, [pc, #604]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10d      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	4b94      	ldr	r3, [pc, #592]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a93      	ldr	r2, [pc, #588]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	61d3      	str	r3, [r2, #28]
 8001a6a:	4b91      	ldr	r3, [pc, #580]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a76:	2301      	movs	r3, #1
 8001a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	4b8e      	ldr	r3, [pc, #568]	; (8001cb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d118      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a86:	4b8b      	ldr	r3, [pc, #556]	; (8001cb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a8a      	ldr	r2, [pc, #552]	; (8001cb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a92:	f7ff fbf9 	bl	8001288 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9a:	f7ff fbf5 	bl	8001288 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b64      	cmp	r3, #100	; 0x64
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0fd      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4b81      	ldr	r3, [pc, #516]	; (8001cb4 <HAL_RCC_OscConfig+0x4f8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x312>
 8001ac0:	4b7b      	ldr	r3, [pc, #492]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4a7a      	ldr	r2, [pc, #488]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6213      	str	r3, [r2, #32]
 8001acc:	e02d      	b.n	8001b2a <HAL_RCC_OscConfig+0x36e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x334>
 8001ad6:	4b76      	ldr	r3, [pc, #472]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a75      	ldr	r2, [pc, #468]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	6213      	str	r3, [r2, #32]
 8001ae2:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a72      	ldr	r2, [pc, #456]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	f023 0304 	bic.w	r3, r3, #4
 8001aec:	6213      	str	r3, [r2, #32]
 8001aee:	e01c      	b.n	8001b2a <HAL_RCC_OscConfig+0x36e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d10c      	bne.n	8001b12 <HAL_RCC_OscConfig+0x356>
 8001af8:	4b6d      	ldr	r3, [pc, #436]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a6c      	ldr	r2, [pc, #432]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	4b6a      	ldr	r3, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4a69      	ldr	r2, [pc, #420]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6213      	str	r3, [r2, #32]
 8001b10:	e00b      	b.n	8001b2a <HAL_RCC_OscConfig+0x36e>
 8001b12:	4b67      	ldr	r3, [pc, #412]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a66      	ldr	r2, [pc, #408]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6213      	str	r3, [r2, #32]
 8001b1e:	4b64      	ldr	r3, [pc, #400]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a63      	ldr	r2, [pc, #396]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d015      	beq.n	8001b5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7ff fba9 	bl	8001288 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7ff fba5 	bl	8001288 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e0ab      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	4b57      	ldr	r3, [pc, #348]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ee      	beq.n	8001b3a <HAL_RCC_OscConfig+0x37e>
 8001b5c:	e014      	b.n	8001b88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fb93 	bl	8001288 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7ff fb8f 	bl	8001288 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e095      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1ee      	bne.n	8001b66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d105      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8e:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8081 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba4:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d061      	beq.n	8001c74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d146      	bne.n	8001c46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <HAL_RCC_OscConfig+0x4fc>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fb63 	bl	8001288 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc6:	f7ff fb5f 	bl	8001288 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e067      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bec:	d108      	bne.n	8001c00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bee:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	492d      	ldr	r1, [pc, #180]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a19      	ldr	r1, [r3, #32]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	430b      	orrs	r3, r1
 8001c12:	4927      	ldr	r1, [pc, #156]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x4fc>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fb33 	bl	8001288 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c26:	f7ff fb2f 	bl	8001288 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e037      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x46a>
 8001c44:	e02f      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <HAL_RCC_OscConfig+0x4fc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fb1c 	bl	8001288 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7ff fb18 	bl	8001288 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e020      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x498>
 8001c72:	e018      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e013      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	42420060 	.word	0x42420060

08001cbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0d0      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d910      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 0207 	bic.w	r2, r3, #7
 8001ce6:	4965      	ldr	r1, [pc, #404]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b63      	ldr	r3, [pc, #396]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0b8      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d18:	4b59      	ldr	r3, [pc, #356]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a58      	ldr	r2, [pc, #352]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4a52      	ldr	r2, [pc, #328]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3c:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	494d      	ldr	r1, [pc, #308]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d040      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d115      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e07f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e073      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e06b      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9a:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f023 0203 	bic.w	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4936      	ldr	r1, [pc, #216]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dac:	f7ff fa6c 	bl	8001288 <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f7ff fa68 	bl	8001288 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e053      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 020c 	and.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1eb      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b27      	ldr	r3, [pc, #156]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d210      	bcs.n	8001e0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 0207 	bic.w	r2, r3, #7
 8001df2:	4922      	ldr	r1, [pc, #136]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e032      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4916      	ldr	r1, [pc, #88]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	490e      	ldr	r1, [pc, #56]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e4a:	f000 f821 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 8001e4e:	4601      	mov	r1, r0
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e62:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <HAL_RCC_ClockConfig+0x1cc>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_ClockConfig+0x1d0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f9ca 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08004f88 	.word	0x08004f88
 8001e88:	20000018 	.word	0x20000018
 8001e8c:	2000001c 	.word	0x2000001c

08001e90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e90:	b490      	push	{r4, r7}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e96:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e98:	1d3c      	adds	r4, r7, #4
 8001e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ea0:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d002      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d003      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x46>
 8001ece:	e02d      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ed2:	623b      	str	r3, [r7, #32]
      break;
 8001ed4:	e02d      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	0c9b      	lsrs	r3, r3, #18
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ee8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	0c5b      	lsrs	r3, r3, #17
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f02:	4413      	add	r3, r2
 8001f04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f0e:	fb02 f203 	mul.w	r2, r2, r3
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1a:	e004      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	623b      	str	r3, [r7, #32]
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f2e:	623b      	str	r3, [r7, #32]
      break;
 8001f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f32:	6a3b      	ldr	r3, [r7, #32]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc90      	pop	{r4, r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	08002760 	.word	0x08002760
 8001f44:	08002770 	.word	0x08002770
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	007a1200 	.word	0x007a1200
 8001f50:	003d0900 	.word	0x003d0900

08001f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <RCC_Delay+0x34>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <RCC_Delay+0x38>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0a5b      	lsrs	r3, r3, #9
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f70:	bf00      	nop
  }
  while (Delay --);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1e5a      	subs	r2, r3, #1
 8001f76:	60fa      	str	r2, [r7, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f9      	bne.n	8001f70 <RCC_Delay+0x1c>
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000018 	.word	0x20000018
 8001f8c:	10624dd3 	.word	0x10624dd3

08001f90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e076      	b.n	8002090 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d108      	bne.n	8001fbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fb2:	d009      	beq.n	8001fc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
 8001fba:	e005      	b.n	8001fc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff f824 	bl	8001030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ffe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204c:	ea42 0103 	orr.w	r1, r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	0c1a      	lsrs	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f002 0204 	and.w	r2, r2, #4
 800206e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	69da      	ldr	r2, [r3, #28]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800207e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	4613      	mov	r3, r2
 80020a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_SPI_Transmit+0x22>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e126      	b.n	8002308 <HAL_SPI_Transmit+0x270>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020c2:	f7ff f8e1 	bl	8001288 <HAL_GetTick>
 80020c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d002      	beq.n	80020de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020d8:	2302      	movs	r3, #2
 80020da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020dc:	e10b      	b.n	80022f6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_SPI_Transmit+0x52>
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d102      	bne.n	80020f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020ee:	e102      	b.n	80022f6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2203      	movs	r2, #3
 80020f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	88fa      	ldrh	r2, [r7, #6]
 8002108:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	88fa      	ldrh	r2, [r7, #6]
 800210e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002136:	d10f      	bne.n	8002158 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002146:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002156:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002162:	2b40      	cmp	r3, #64	; 0x40
 8002164:	d007      	beq.n	8002176 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800217e:	d14b      	bne.n	8002218 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_SPI_Transmit+0xf6>
 8002188:	8afb      	ldrh	r3, [r7, #22]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d13e      	bne.n	800220c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	881a      	ldrh	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	1c9a      	adds	r2, r3, #2
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021b2:	e02b      	b.n	800220c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d112      	bne.n	80021e8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	881a      	ldrh	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	1c9a      	adds	r2, r3, #2
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80021e6:	e011      	b.n	800220c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021e8:	f7ff f84e 	bl	8001288 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d803      	bhi.n	8002200 <HAL_SPI_Transmit+0x168>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fe:	d102      	bne.n	8002206 <HAL_SPI_Transmit+0x16e>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	77fb      	strb	r3, [r7, #31]
          goto error;
 800220a:	e074      	b.n	80022f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1ce      	bne.n	80021b4 <HAL_SPI_Transmit+0x11c>
 8002216:	e04c      	b.n	80022b2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <HAL_SPI_Transmit+0x18e>
 8002220:	8afb      	ldrh	r3, [r7, #22]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d140      	bne.n	80022a8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	330c      	adds	r3, #12
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800224c:	e02c      	b.n	80022a8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b02      	cmp	r3, #2
 800225a:	d113      	bne.n	8002284 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	330c      	adds	r3, #12
 8002266:	7812      	ldrb	r2, [r2, #0]
 8002268:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002278:	b29b      	uxth	r3, r3
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	86da      	strh	r2, [r3, #54]	; 0x36
 8002282:	e011      	b.n	80022a8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002284:	f7ff f800 	bl	8001288 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d803      	bhi.n	800229c <HAL_SPI_Transmit+0x204>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229a:	d102      	bne.n	80022a2 <HAL_SPI_Transmit+0x20a>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022a6:	e026      	b.n	80022f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1cd      	bne.n	800224e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	6839      	ldr	r1, [r7, #0]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f8b2 	bl	8002420 <SPI_EndRxTxTransaction>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2220      	movs	r2, #32
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10a      	bne.n	80022e6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	77fb      	strb	r3, [r7, #31]
 80022f2:	e000      	b.n	80022f6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80022f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002306:	7ffb      	ldrb	r3, [r7, #31]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002320:	f7fe ffb2 	bl	8001288 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	4413      	add	r3, r2
 800232e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002330:	f7fe ffaa 	bl	8001288 <HAL_GetTick>
 8002334:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002336:	4b39      	ldr	r3, [pc, #228]	; (800241c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	015b      	lsls	r3, r3, #5
 800233c:	0d1b      	lsrs	r3, r3, #20
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	fb02 f303 	mul.w	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002346:	e054      	b.n	80023f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d050      	beq.n	80023f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002350:	f7fe ff9a 	bl	8001288 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	429a      	cmp	r2, r3
 800235e:	d902      	bls.n	8002366 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d13d      	bne.n	80023e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002374:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800237e:	d111      	bne.n	80023a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002388:	d004      	beq.n	8002394 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002392:	d107      	bne.n	80023a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ac:	d10f      	bne.n	80023ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e017      	b.n	8002412 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4013      	ands	r3, r2
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	429a      	cmp	r2, r3
 8002400:	bf0c      	ite	eq
 8002402:	2301      	moveq	r3, #1
 8002404:	2300      	movne	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	429a      	cmp	r2, r3
 800240e:	d19b      	bne.n	8002348 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000018 	.word	0x20000018

08002420 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2200      	movs	r2, #0
 8002434:	2180      	movs	r1, #128	; 0x80
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7ff ff6a 	bl	8002310 <SPI_WaitFlagStateUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	f043 0220 	orr.w	r2, r3, #32
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e000      	b.n	8002454 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <__errno>:
 800245c:	4b01      	ldr	r3, [pc, #4]	; (8002464 <__errno+0x8>)
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000024 	.word	0x20000024

08002468 <__libc_init_array>:
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	2500      	movs	r5, #0
 800246c:	4e0c      	ldr	r6, [pc, #48]	; (80024a0 <__libc_init_array+0x38>)
 800246e:	4c0d      	ldr	r4, [pc, #52]	; (80024a4 <__libc_init_array+0x3c>)
 8002470:	1ba4      	subs	r4, r4, r6
 8002472:	10a4      	asrs	r4, r4, #2
 8002474:	42a5      	cmp	r5, r4
 8002476:	d109      	bne.n	800248c <__libc_init_array+0x24>
 8002478:	f000 f8ca 	bl	8002610 <_init>
 800247c:	2500      	movs	r5, #0
 800247e:	4e0a      	ldr	r6, [pc, #40]	; (80024a8 <__libc_init_array+0x40>)
 8002480:	4c0a      	ldr	r4, [pc, #40]	; (80024ac <__libc_init_array+0x44>)
 8002482:	1ba4      	subs	r4, r4, r6
 8002484:	10a4      	asrs	r4, r4, #2
 8002486:	42a5      	cmp	r5, r4
 8002488:	d105      	bne.n	8002496 <__libc_init_array+0x2e>
 800248a:	bd70      	pop	{r4, r5, r6, pc}
 800248c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002490:	4798      	blx	r3
 8002492:	3501      	adds	r5, #1
 8002494:	e7ee      	b.n	8002474 <__libc_init_array+0xc>
 8002496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800249a:	4798      	blx	r3
 800249c:	3501      	adds	r5, #1
 800249e:	e7f2      	b.n	8002486 <__libc_init_array+0x1e>
 80024a0:	08004f98 	.word	0x08004f98
 80024a4:	08004f98 	.word	0x08004f98
 80024a8:	08004f98 	.word	0x08004f98
 80024ac:	08004f9c 	.word	0x08004f9c

080024b0 <memset>:
 80024b0:	4603      	mov	r3, r0
 80024b2:	4402      	add	r2, r0
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d100      	bne.n	80024ba <memset+0xa>
 80024b8:	4770      	bx	lr
 80024ba:	f803 1b01 	strb.w	r1, [r3], #1
 80024be:	e7f9      	b.n	80024b4 <memset+0x4>

080024c0 <rand>:
 80024c0:	b538      	push	{r3, r4, r5, lr}
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <rand+0x50>)
 80024c4:	681c      	ldr	r4, [r3, #0]
 80024c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024c8:	b97b      	cbnz	r3, 80024ea <rand+0x2a>
 80024ca:	2018      	movs	r0, #24
 80024cc:	f000 f82c 	bl	8002528 <malloc>
 80024d0:	4a10      	ldr	r2, [pc, #64]	; (8002514 <rand+0x54>)
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <rand+0x58>)
 80024d4:	63a0      	str	r0, [r4, #56]	; 0x38
 80024d6:	e9c0 2300 	strd	r2, r3, [r0]
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <rand+0x5c>)
 80024dc:	2201      	movs	r2, #1
 80024de:	6083      	str	r3, [r0, #8]
 80024e0:	230b      	movs	r3, #11
 80024e2:	8183      	strh	r3, [r0, #12]
 80024e4:	2300      	movs	r3, #0
 80024e6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80024ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <rand+0x60>)
 80024ee:	690a      	ldr	r2, [r1, #16]
 80024f0:	694b      	ldr	r3, [r1, #20]
 80024f2:	4350      	muls	r0, r2
 80024f4:	4c0b      	ldr	r4, [pc, #44]	; (8002524 <rand+0x64>)
 80024f6:	fb04 0003 	mla	r0, r4, r3, r0
 80024fa:	fba2 2304 	umull	r2, r3, r2, r4
 80024fe:	4403      	add	r3, r0
 8002500:	1c54      	adds	r4, r2, #1
 8002502:	f143 0500 	adc.w	r5, r3, #0
 8002506:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800250a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800250e:	bd38      	pop	{r3, r4, r5, pc}
 8002510:	20000024 	.word	0x20000024
 8002514:	abcd330e 	.word	0xabcd330e
 8002518:	e66d1234 	.word	0xe66d1234
 800251c:	0005deec 	.word	0x0005deec
 8002520:	5851f42d 	.word	0x5851f42d
 8002524:	4c957f2d 	.word	0x4c957f2d

08002528 <malloc>:
 8002528:	4b02      	ldr	r3, [pc, #8]	; (8002534 <malloc+0xc>)
 800252a:	4601      	mov	r1, r0
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	f000 b803 	b.w	8002538 <_malloc_r>
 8002532:	bf00      	nop
 8002534:	20000024 	.word	0x20000024

08002538 <_malloc_r>:
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	1ccd      	adds	r5, r1, #3
 800253c:	f025 0503 	bic.w	r5, r5, #3
 8002540:	3508      	adds	r5, #8
 8002542:	2d0c      	cmp	r5, #12
 8002544:	bf38      	it	cc
 8002546:	250c      	movcc	r5, #12
 8002548:	2d00      	cmp	r5, #0
 800254a:	4606      	mov	r6, r0
 800254c:	db01      	blt.n	8002552 <_malloc_r+0x1a>
 800254e:	42a9      	cmp	r1, r5
 8002550:	d903      	bls.n	800255a <_malloc_r+0x22>
 8002552:	230c      	movs	r3, #12
 8002554:	6033      	str	r3, [r6, #0]
 8002556:	2000      	movs	r0, #0
 8002558:	bd70      	pop	{r4, r5, r6, pc}
 800255a:	f000 f857 	bl	800260c <__malloc_lock>
 800255e:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <_malloc_r+0xac>)
 8002560:	6814      	ldr	r4, [r2, #0]
 8002562:	4621      	mov	r1, r4
 8002564:	b991      	cbnz	r1, 800258c <_malloc_r+0x54>
 8002566:	4c20      	ldr	r4, [pc, #128]	; (80025e8 <_malloc_r+0xb0>)
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	b91b      	cbnz	r3, 8002574 <_malloc_r+0x3c>
 800256c:	4630      	mov	r0, r6
 800256e:	f000 f83d 	bl	80025ec <_sbrk_r>
 8002572:	6020      	str	r0, [r4, #0]
 8002574:	4629      	mov	r1, r5
 8002576:	4630      	mov	r0, r6
 8002578:	f000 f838 	bl	80025ec <_sbrk_r>
 800257c:	1c43      	adds	r3, r0, #1
 800257e:	d124      	bne.n	80025ca <_malloc_r+0x92>
 8002580:	230c      	movs	r3, #12
 8002582:	4630      	mov	r0, r6
 8002584:	6033      	str	r3, [r6, #0]
 8002586:	f000 f842 	bl	800260e <__malloc_unlock>
 800258a:	e7e4      	b.n	8002556 <_malloc_r+0x1e>
 800258c:	680b      	ldr	r3, [r1, #0]
 800258e:	1b5b      	subs	r3, r3, r5
 8002590:	d418      	bmi.n	80025c4 <_malloc_r+0x8c>
 8002592:	2b0b      	cmp	r3, #11
 8002594:	d90f      	bls.n	80025b6 <_malloc_r+0x7e>
 8002596:	600b      	str	r3, [r1, #0]
 8002598:	18cc      	adds	r4, r1, r3
 800259a:	50cd      	str	r5, [r1, r3]
 800259c:	4630      	mov	r0, r6
 800259e:	f000 f836 	bl	800260e <__malloc_unlock>
 80025a2:	f104 000b 	add.w	r0, r4, #11
 80025a6:	1d23      	adds	r3, r4, #4
 80025a8:	f020 0007 	bic.w	r0, r0, #7
 80025ac:	1ac3      	subs	r3, r0, r3
 80025ae:	d0d3      	beq.n	8002558 <_malloc_r+0x20>
 80025b0:	425a      	negs	r2, r3
 80025b2:	50e2      	str	r2, [r4, r3]
 80025b4:	e7d0      	b.n	8002558 <_malloc_r+0x20>
 80025b6:	684b      	ldr	r3, [r1, #4]
 80025b8:	428c      	cmp	r4, r1
 80025ba:	bf16      	itet	ne
 80025bc:	6063      	strne	r3, [r4, #4]
 80025be:	6013      	streq	r3, [r2, #0]
 80025c0:	460c      	movne	r4, r1
 80025c2:	e7eb      	b.n	800259c <_malloc_r+0x64>
 80025c4:	460c      	mov	r4, r1
 80025c6:	6849      	ldr	r1, [r1, #4]
 80025c8:	e7cc      	b.n	8002564 <_malloc_r+0x2c>
 80025ca:	1cc4      	adds	r4, r0, #3
 80025cc:	f024 0403 	bic.w	r4, r4, #3
 80025d0:	42a0      	cmp	r0, r4
 80025d2:	d005      	beq.n	80025e0 <_malloc_r+0xa8>
 80025d4:	1a21      	subs	r1, r4, r0
 80025d6:	4630      	mov	r0, r6
 80025d8:	f000 f808 	bl	80025ec <_sbrk_r>
 80025dc:	3001      	adds	r0, #1
 80025de:	d0cf      	beq.n	8002580 <_malloc_r+0x48>
 80025e0:	6025      	str	r5, [r4, #0]
 80025e2:	e7db      	b.n	800259c <_malloc_r+0x64>
 80025e4:	200000bc 	.word	0x200000bc
 80025e8:	200000c0 	.word	0x200000c0

080025ec <_sbrk_r>:
 80025ec:	b538      	push	{r3, r4, r5, lr}
 80025ee:	2300      	movs	r3, #0
 80025f0:	4c05      	ldr	r4, [pc, #20]	; (8002608 <_sbrk_r+0x1c>)
 80025f2:	4605      	mov	r5, r0
 80025f4:	4608      	mov	r0, r1
 80025f6:	6023      	str	r3, [r4, #0]
 80025f8:	f7fe fd8c 	bl	8001114 <_sbrk>
 80025fc:	1c43      	adds	r3, r0, #1
 80025fe:	d102      	bne.n	8002606 <_sbrk_r+0x1a>
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	b103      	cbz	r3, 8002606 <_sbrk_r+0x1a>
 8002604:	602b      	str	r3, [r5, #0]
 8002606:	bd38      	pop	{r3, r4, r5, pc}
 8002608:	200001f0 	.word	0x200001f0

0800260c <__malloc_lock>:
 800260c:	4770      	bx	lr

0800260e <__malloc_unlock>:
 800260e:	4770      	bx	lr

08002610 <_init>:
 8002610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002612:	bf00      	nop
 8002614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002616:	bc08      	pop	{r3}
 8002618:	469e      	mov	lr, r3
 800261a:	4770      	bx	lr

0800261c <_fini>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr
